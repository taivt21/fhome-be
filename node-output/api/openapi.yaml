openapi: 3.0.0
info:
  title: F_homes
  version: 1.0.0
  description: "This platform provides an UI for API using",
    contact: {
      name: "Vu Tai",
      url: "https://github.com/taivt21",
    },
servers:
- url: https://fhome-be.vercel.app/
paths:
  /login:
    post:
      tags:
      - Authorization
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      requestBody:
        description: Add your accessToken
        content:
          application/json:
            schema:
              example:
                accessToken: your Token
      responses:
        "200":
          description: Login successfully!
        "400":
          description: Your email domain is not supported.
        "401":
          description: Server requires authentication for client request
        "403":
          description: Client has been identified but has no access rights
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Authorization
  /getUser:
    get:
      tags:
      - User
      summary: Finds All User
      description: Multiple status values can be provided with comma separated strings
      operationId: findUser
      responses:
        "200":
          description: Get users successfully!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200'
                x-content-type: application/json
        "400":
          description: Invalid status value
        "500":
          description: Internal Server Error
      x-swagger-router-controller: User
  /setUserStatus/{userID}:
    put:
      tags:
      - User
      summary: Update user status
      description: This can only be done by the logged in user.
      operationId: updateUserStatus
      parameters:
      - name: userID
        in: path
        description: name that need to be update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Update an user status in the data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: User status updated successfully!
        "404":
          description: User not found or status is not true
        "500":
          description: Internal Server Error
      x-swagger-router-controller: User
  /deleteUser/{userID}:
    delete:
      tags:
      - User
      summary: Change user status become inactive
      description: This can only be done by the logged in.
      operationId: deleteUser
      parameters:
      - name: userID
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: User status change to inactive success
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      x-swagger-router-controller: User
  /users:
    get:
      tags:
      - User
      summary: Finds All User
      description: Multiple status values can be provided with comma separated strings
      operationId: findUserWithAuth
      responses:
        "200":
          description: Get users successfully!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200'
                x-content-type: application/json
        "400":
          description: Invalid status value request
        "401":
          description: Server requires authentication for client request
        "403":
          description: Client has been identified but has no access rights
        "500":
          description: Internal Server Error
      security:
      - BasicAuth: []
      x-swagger-router-controller: User
    post:
      tags:
      - User
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Create a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
        "201":
          description: Create users successfully!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200'
                x-content-type: application/json
        "401":
          description: Server requires authentication for client request
        "403":
          description: Client has been identified but has no access rights
        "500":
          description: Internal Server Error
      security:
      - BasicAuth: []
      x-swagger-router-controller: User
  /users/{userID}:
    get:
      tags:
      - User
      summary: Get user by user id
      description: ""
      operationId: getUserById
      parameters:
      - name: userID
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Get users successfully!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200'
                x-content-type: application/json
        "400":
          description: Invalid username supplied
        "401":
          description: Server requires authentication for client request
        "403":
          description: Client has been identified but has no access rights
        "404":
          description: User not found
        "500":
          description: Internal Server Error
      security:
      - BasicAuth: []
      x-swagger-router-controller: User
    put:
      tags:
      - User
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUserWithAuth
      parameters:
      - name: userID
        in: path
        description: name that need to be update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Update an existent user in the data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: Update users successfully!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200'
                x-content-type: application/json
        "401":
          description: Server requires authentication for client request
        "403":
          description: Client has been identified but has no access rights
        "404":
          description: User not found
        "500":
          description: Internal Server Error
      security:
      - BasicAuth: []
      x-swagger-router-controller: userRoutes
    delete:
      tags:
      - User
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUserwithinAuth
      parameters:
      - name: userID
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Users change status inactive successfully!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200'
                x-content-type: application/json
        "400":
          description: Invalid username supplied
        "401":
          description: Server requires authentication for client request
        "403":
          description: Client has been identified but has no access rights
        "404":
          description: User not found
        "500":
          description: Internal Server Error
      security:
      - BasicAuth: []
      x-swagger-router-controller: User
  /postingNew:
    post:
      tags:
      - Posting
      summary: create new posting
      description: ""
      operationId: UserPosting
      requestBody:
        description: create a new post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Posting'
          application/xml:
            schema:
              $ref: '#/components/schemas/Posting'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Posting'
      responses:
        "201":
          description: Post created successfully!
        "401":
          description: Server requires authentication for client request
        "500":
          description: Internal Server Error
      security:
      - BasicAuth: []
      x-swagger-router-controller: Posting
  /getAllPostings:
    get:
      tags:
      - Posting
      summary: Finds All Posting
      description: Multiple status values can be provided with comma separated strings
      operationId: findAllPosting
      responses:
        "200":
          description: Get posts successfully!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Posting'
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Posting'
        "404":
          description: Posting not found
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Posting
  /getPostingById/{PostingId}:
    get:
      tags:
      - Posting
      summary: Get Posting by user id
      description: ""
      operationId: getPostingById
      parameters:
      - name: PostingId
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posting'
            application/xml:
              schema:
                $ref: '#/components/schemas/Posting'
        "400":
          description: Invalid Id supplied
        "404":
          description: Posting not found
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Posting
  /updatePosting/{PostingId}:
    put:
      tags:
      - Posting
      summary: Update Posting
      description: This can only be done by the logged in user.
      operationId: updatePostingWithAuth
      parameters:
      - name: PostingId
        in: path
        description: name that need to be update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Update an existent user in the data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Posting'
          application/xml:
            schema:
              $ref: '#/components/schemas/Posting'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Posting'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posting'
            application/xml:
              schema:
                $ref: '#/components/schemas/Posting'
        "400":
          description: Invalid Id supplied
        "404":
          description: Posting not found
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Posting
  /deletePosting/{PostingId}:
    delete:
      tags:
      - Posting
      summary: Delete Posting
      description: This can only be done by the logged in user.
      operationId: deletePostingwithinAuth
      parameters:
      - name: PostingId
        in: path
        description: The id that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid Id supplied
        "404":
          description: Posting not found
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Posting
  /getRooms:
    get:
      tags:
      - Room
      summary: Finds All Room
      description: Multiple status values can be provided with comma separated strings
      operationId: findAllRoom
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Room
  /rooms:
    post:
      tags:
      - Room
      summary: Update a file
      description: Update a file by its ID
      operationId: roomsPOST
      parameters: []
      responses:
        "200":
          description: Upload Successfully!!
        "400":
          description: Please select an image to upload.
        "500":
          description: Something went wrong. Please try again later.
      x-swagger-router-controller: Room
  /getBuilding:
    get:
      tags:
      - Building
      summary: Finds All Building
      description: Multiple status values can be provided with comma separated strings
      operationId: findAllBuilding
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Building'
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Building'
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Building
components:
  schemas:
    User:
      type: object
      properties:
        email:
          type: string
          description: admin email
        phoneNumber:
          type: string
          description: admin phone number
        _ID:
          type: string
          description: admin ID
        fullname:
          type: string
          description: Name
        status:
          type: boolean
          description: status
        roleName:
          type: string
          description: status
        __v:
          type: number
      example:
        _ID: adminID
        FullName: adminName
        password: password
        phoneNum: phoneNum
        email: email
        status: true
        roleName: fptmember
    Posting:
      type: object
      properties:
        title:
          type: string
          description: title
        Description:
          type: string
          description: PostingDescription
        buildings:
          type: string
          description: buildings
        roomTypes:
          type: string
          description: type of room
        userPosting:
          type: string
          description: user ID
        img:
          type: string
          description: img
      example:
        img: img
        Description: Description
        roomTypes: roomTypes
        buildings: buildings
        userPosting: userPosting
        title: title
    Room:
      type: object
      properties:
        Size:
          type: string
          description: PostingDescription
        Price:
          type: string
          description: PostingDescription
        Description:
          type: string
          description: PostingDescription
        Status:
          type: string
          description: PostingDescription
        Building:
          type: string
          description: PostingDescription
        User:
          type: string
          description: user ID
      example:
        Status: Status
        Building: Building
        Description: Description
        User: User
        Price: Price
        Size: Size
    Building:
      type: object
      properties:
        BuildingName:
          type: string
          description: Name of building
        Address:
          type: string
          description: Address
        Status:
          type: boolean
          description: status of building
      example:
        Status: true
        Address: Address
        BuildingName: BuildingName
    inline_response_200:
      type: object
      properties:
        status:
          type: string
        messages:
          type: string
        data:
          $ref: '#/components/schemas/User'
      example:
        data:
          _ID: adminID
          FullName: adminName
          password: password
          phoneNum: phoneNum
          email: email
          status: true
          roleName: fptmember
        messages: messages
        status: status
  securitySchemes:
    BasicAuth:
      type: http
      scheme: bearer
      bearerFormat: "JWT,"
